package client;

import crdt.Crdt;
import crdt.OperationType;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NAFIS, ALLEN
 */

public class NotePadGUI extends javax.swing.JFrame {

    /**
     * Creates new form NotePadGUI
     */

    private String fileName;
    private Clipboard clipBoard = getToolkit().getSystemClipboard();
    private static Crdt data;
    private static boolean isFromOthers = false;

    private NotePadGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    String previousText = "";
    private void initComponents() {

        JPanel jPanel1 = new JPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        textArea = new javax.swing.JTextArea();
        JMenuBar jMenuBar1 = new JMenuBar();
        JMenu file = new JMenu();
        JMenuItem newFile = new JMenuItem();
        JMenuItem openFile = new JMenuItem();
        JMenuItem saveFile = new JMenuItem();
        JMenuItem exit = new JMenuItem();
        JMenu menu = new JMenu();
        JMenuItem cutText = new JMenuItem();
        // Variables declaration - do not modify//GEN-BEGIN:variables
        JMenuItem copyText = new JMenuItem();
        JMenuItem pasteText = new JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 700));
        setResizable(false);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        textArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                previousText = textArea.getText();
            }
        });

        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if(isFromOthers){
                    return;
                }
                try {
                    String insertedText = e.getDocument().getText(e.getOffset(),e.getLength());
                    System.out.println("inserting "+insertedText+" from "+e.getOffset());
                    multipleInsert(insertedText,e.getOffset());
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if(isFromOthers){
                    return;
                }
                String removedText = previousText.substring(e.getOffset(), e.getOffset() + e.getLength());
                System.out.println("removing "+removedText+" from "+e.getOffset());
                multipleDelete(removedText,e.getOffset()+1);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {

            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );

        file.setText("File");

        newFile.setText("New File");
        newFile.addActionListener(this::newFileActionPerformed);
        file.add(newFile);

        openFile.setText("Open File");
        openFile.addActionListener(this::openFileActionPerformed);
        file.add(openFile);

        saveFile.setText("Save File");
        saveFile.addActionListener(this::saveFileActionPerformed);
        file.add(saveFile);

        exit.setText("Exit");
        exit.addActionListener(this::exitActionPerformed);
        file.add(exit);

        jMenuBar1.add(file);

        menu.setText("Edit");

        cutText.setText("Cut");
        cutText.addActionListener(this::cutTextActionPerformed);
        menu.add(cutText);

        copyText.setText("Copy");
        copyText.addActionListener(this::copyTextActionPerformed);
        menu.add(copyText);

        pasteText.setText("Paste");
        pasteText.addActionListener(this::pasteTextActionPerformed);
        menu.add(pasteText);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        // TODO add your handling code here:
        textArea.setText("");
        setTitle("");
    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        FileDialog fileDialog = new FileDialog(NotePadGUI.this,"Open File", FileDialog.LOAD);
        fileDialog.setVisible(true);

        if (fileDialog.getFile() != null) {
            fileName = fileDialog.getDirectory() + fileDialog.getFile();
            setTitle(fileName);
        }

        try{
            BufferedReader reader = new BufferedReader(new FileReader(fileName));

            StringBuilder sb = new StringBuilder();

            String line;

            while ((line = reader.readLine()) != null) {
                sb.append(line).append("\n");
                textArea.setText(sb.toString());
            }
            reader.close();
        } catch (IOException e){
            System.out.println("File not found or corrupted");
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:

        FileDialog fileDialog = new FileDialog(NotePadGUI.this,"Save File", FileDialog.SAVE);

        fileDialog.setVisible(true);

        if (fileDialog.getFile() != null) {
            fileName = fileDialog.getDirectory() + fileDialog.getFile();
            setTitle(fileName);
        }

        try {
            FileWriter fileWriter = new FileWriter(fileName);
            fileWriter.write(textArea.getText());
            setTitle(fileName);
            fileWriter.close();

        } catch(IOException e){
            System.out.println("File not found or corrupted");
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void cutTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutTextActionPerformed
        // TODO add your handling code here:
        String cutString = textArea.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutString);
        clipBoard.setContents(cutSelection, cutSelection);
        textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd());
    }//GEN-LAST:event_cutTextActionPerformed

    private void copyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTextActionPerformed
        // TODO add your handling code here:
        String copyString = textArea.getSelectedText();
        StringSelection copySelection = new StringSelection(copyString);
        clipBoard.setContents(copySelection, copySelection);

    }//GEN-LAST:event_copyTextActionPerformed

    private void pasteTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteTextActionPerformed
        // TODO add your handling code here:
        try{
            Transferable pasteText = clipBoard.getContents(NotePadGUI.this);
            String selectedText = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceRange(selectedText, textArea.getSelectionStart(), textArea.getSelectionEnd());

        } catch(Exception e){
            System.out.println("Something went wrong!!");
        }
    }//GEN-LAST:event_pasteTextActionPerformed


    /**
     * @param stringToBeInserted the string to be inserted
     * @param initPosition the initial position of where to start inserting
     */
    private void multipleInsert(String stringToBeInserted, int initPosition){
        for(int i = 0 ; i < stringToBeInserted.length() ; i++){
            char ch = stringToBeInserted.charAt(i);
            data.update(OperationType.insert,ch,initPosition+i);
        }
    }

    /**
     * @param stringToBeDeleted the string to be deleted
     * @param initPosition the initial position of where to start deleting
     */
    private void multipleDelete(String stringToBeDeleted, int initPosition){
        for(int i = 0 ; i < stringToBeDeleted.length() ; i++){
            char ch = stringToBeDeleted.charAt(i);
            data.update(OperationType.remove,ch,initPosition);
        }
    }

    /**
     * It should be called by the controller to update the GUI, the data should be provided
     * The input it requires is the whole string
     * @param str
     */
    public static void updateEditor(String str){
        isFromOthers = true;
        textArea.setText(str);
        isFromOthers = false;
    }

    /**
     * @param crdt holds the data in a doctree structure
     */
    public static void init(Crdt crdt) {
        data = crdt;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotePadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotePadGUI().setVisible(true);
            }
        });
    }

    private static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
